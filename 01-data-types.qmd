---
title: "Python Fundamentals"
jupyter: python3
---

## Variables y tipos de dato

Una variable es un dato que se guarda en la memoria del ordenador. Cada variable es de un tipo de dato:

* Enteros (`Int`)

* Floats (`float`): con decimales

* Strings (`str`)

* Booleans (`bool`)

## Estructuras de datos

Son bloques que permiten organizar y almacenar información junta.

### Tuplas

Son secuencias **inmutables**. Se escriben entre paréntesis.

### Listas

Son secuencias ordenadas y mutables. 

Se escriben entre corchetes. 

Pueden almacenar tipos de dato distintos.


```{python}
route = [
 (35.6895, 139.6917), 
 (34.0522, -118.2437), 
 (51.5074, -0.1278),
]
print("Travel route:", route)
```

Podemos añadir elementos a la lista con `append`.


```{python}
route.append((5.34, 87.12))
print(route)
```

### Sets

Colecciones desordenadas de **elementos únicos**. Es decir, eliminan duplicados automáticamente. Es útil para trabajar con identificadores.

### Diccionarios

Parejas de *key-value* muy utilizados. Por ejemplo, para guardar metadatos.

### Consejos de uso

Utilizar tuplas cuando:

* Se necesite un grupo fijo de pares de valores que no deben cambiar (p.ej. coordenadas)

* Guardar datos que serán utilizados como keys de diccionarios

* Asegurar integridad de datos evitando modificaciones accidentales

Utilizar listas cuando:

* Necesite colección ordenada que puede cambiar

* Añadir, eliminar o modificar elementos dinámicamente

* Orden importa

Utilizar sets:

* Eliminar duplicados

* Encontrar elementos comunes entre datasets

* Orden no importa, pero singularidad sí

Utilizar diccionarios:

* Necesitas asociar nombres con valores

* Organización de datos estructurados complejos

## Strings

Al trabajar con con strings podemos aplicar métodos comunes como:

```{python}
ciudad = "Monforte de Lemos"
print(ciudad.lower())
print(ciudad.upper())
print(ciudad.title())
print(ciudad.replace('de', 'DEE'))
```


```{python}
city_names = ["San Francisco", "New York", "Tokyo"]
city_name = ", ".join(city_names)
print(f"Joined city name: {city_name}")
```

```{python}
path_parts = ["data", "geographic", "elevation", "dem.tif"]
full_path = "/".join(path_parts)
print(f"Directorio: {full_path}")
```

## Trabajando con archivos

Al trabjar con archivos se recomienta utilizar `with`, que se encarga de abrir y cerrar incluso si ocurre algún error.

Con `try-except` guardamos errores que puedan ocurrir durante el proceso.

```{python}
sample_data = """35.6895,139.6917
34.0522,-118.2437
51.5074,-0.1278
-33.8688,151.2093
48.8566,2.3522"""

output_file = "00_data/coordinates.txt"

try:
    with open(output_file, "w") as file:
        file.write(sample_data)
    print(f"Sample file '{output_file}' has been created successfully.")
except Exception as e:
    print(f"An error occurred while creating the file: {e}")
```

Para manejar errores tenemos:

* `try`: código que puede causar error

* `except`: qué hacer cuándo ocurre un error

* `finally`: código que se ejecuta ocurra o no ocurra el error (opcional)

```{python}
# Example of exception handling when parsing coordinates
def parse_coordinates(line):
    """
    Parse a line of text into latitude and longitude coordinates.
    Args:
    line (str): A string containing coordinates in the format "lat,lon"
    Returns:
    tuple: (latitude, longitude) as floats, or None if parsing fails
    """
    try:
        # Attempt to split the line and convert to numbers
        lat, lon = line.strip().split(",")
        lat = float(lat) # This might raise ValueError if lat isn't a valid
        number
        lon = float(lon) # This might raise ValueError if lon isn't a valid
        number
        return lat, lon
    except ValueError as e:
    # This happens when we can't convert to float or split doesn't work as
        print(f"Data format error: {e}. Could not parse line: '{line.strip()}'")
        return None
    except Exception as e:
    # This catches any other unexpected errors
        print(f"An unexpected error occurred: {e}")
        return None

# Test with both valid and invalid data
test_lines = [
    "35.6895,139.6917", # Valid coordinates (Tokyo)
    "invalid data", # Invalid format
    "45.0,-119.0", # Valid
    "45.0,not_a_number", # Invalid longitude
    "only_one_value", # Missing comma
]

print("Testing coordinate parsing:")
for line in test_lines:
    coordinates = parse_coordinates(line)
    if coordinates:
        print(f"✓ Successfully parsed: {coordinates}")
    else:
        print(f"✗ Failed to parse: '{line}'")
```
